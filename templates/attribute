// This file is automatically generated.
package {{.PkgName}}

import (
  "encoding/json"
  "errors"
  "fmt"
  "strconv"
  "time"

  "github.com/jackc/pgx"
)

type Status byte

const (
  Undefined Status = iota
  Null
  Present
)

func (s Status) String() string {
  switch s {
  case Undefined:
    return "Undefined"
  case Null:
    return "Null"
  case Present:
    return "Present"
  }

  return "Invalid status"
}

{{range .BoxTypes}}
type {{.Name}} struct {
  Value  {{.ValueType}}
  Status Status
}

func (attr {{.Name}}) String() string {
  if attr.Status == Present {
    return fmt.Sprintf("%v", attr.Value)
  }
  return attr.Status.String()
}

func (attr {{.Name}}) addUpdate(columnName string, sets *[]string, args *pgx.QueryArgs) {
  switch attr.Status {
    case Present:
      *sets = append(*sets, columnName+"="+args.Append(attr.Value))
    case Null:
      *sets = append(*sets, columnName+"="+args.Append(nil))
  }
}

func (attr {{.Name}}) addInsert(columnName string, sets, values *[]string, args *pgx.QueryArgs) {
  switch attr.Status {
    case Present:
      *sets = append(*sets, columnName)
      *values = append(*values, args.Append(attr.Value))
    case Null:
      *sets = append(*sets, columnName)
      *values = append(*values, args.Append(nil))
  }
}

func (attr *{{.Name}}) Scan(r *pgx.ValueReader) error {
  var nv pgx.Null{{.Name}}
  err := nv.Scan(r)
  if err != nil {
    return err
  }

  attr.Value = nv.{{.Name}}
  if nv.Valid {
    attr.Status = Present
  } else {
    attr.Status = Null
  }

  return nil
}


func (attr {{.Name}}) FormatCode() int16 {
  var nv pgx.Null{{.Name}}
  return nv.FormatCode()
}

func (attr {{.Name}}) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  var nv pgx.Null{{.Name}}
  nv.{{.Name}} = attr.Value

  switch attr.Status {
  case Present:
    nv.Valid = true
  case Null:
    nv.Valid = false
  case Undefined:
    return errors.New("cannot encode undefined attr")
  }

  return nv.Encode(w, oid)
}
{{end}}

type Bytes struct {
  Value  []byte
  Status Status
}

func (attr *Bytes) addUpdate(columnName string, sets *[]string, args *pgx.QueryArgs) {
  switch attr.Status {
    case Present:
      *sets = append(*sets, columnName+"="+args.Append(attr.Value))
    case Null:
      *sets = append(*sets, columnName+"="+args.Append(nil))
  }
}

func (attr *Bytes) addInsert(columnName string, sets, values *[]string, args *pgx.QueryArgs) {
  switch attr.Status {
    case Present:
      *sets = append(*sets, columnName)
      *values = append(*values, args.Append(attr.Value))
    case Null:
      *sets = append(*sets, columnName)
      *values = append(*values, args.Append(nil))
  }
}

func (attr *Bytes) Scan(vr *pgx.ValueReader) error {
  if vr.Len() == -1 {
    attr.Value = nil
    attr.Status = Null
    return nil
  }

  attr.Value = vr.ReadBytes(vr.Len())
  attr.Status = Present
  return vr.Err()
}


func (attr Bytes) FormatCode() int16 {
  return pgx.BinaryFormatCode
}

func (attr Bytes) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  if oid != pgx.ByteaOid {
    return pgx.SerializationError(fmt.Sprintf("Bytes.Encode cannot encode into OID %d", oid))
  }

  if attr.Status != Present {
    w.WriteInt32(-1)
    return nil
  }

  w.WriteBytes(attr.Value)
  return nil
}


func (attr Bool) MarshalJSON() ([]byte, error) {
  if attr.Status != Present {
    return []byte("null"), nil
  }
  if attr.Value {
    return []byte("true"), nil
  }
  return []byte("false"), nil
}

func (attr *Bool) UnmarshalJSON(bval []byte) error {
  sval := string(bval)

  switch sval {
  case "true":
    attr.Value = true
    attr.Status = Present
  case "false":
    attr.Value = false
    attr.Status = Present
  case "null":
    attr.Status = Null
  default:
    return errors.New("unknown Bool value")
  }

  return nil
}


{{range .IntBoxTypes}}
func (attr {{.Name}}) MarshalJSON() ([]byte, error) {
  if attr.Status != Present {
    return []byte("null"), nil
  }
  return []byte(strconv.FormatInt(int64(attr.Value), 10)), nil
}

func (attr *{{.Name}}) UnmarshalJSON(bval []byte) error {
  sval := string(bval)

  if sval == "null" {
    attr.Status = Null
    return nil
  }

  nval, err := strconv.ParseInt(sval, 10, {{.BitSize}})
  if err != nil {
    return err
  }

  attr.Value = int{{.BitSize}}(nval)
  attr.Status = Present

  return nil
}
{{end}}

func (attr String) MarshalJSON() ([]byte, error) {
  if attr.Status != Present {
    return []byte("null"), nil
  }

  return json.Marshal(attr.Value)
}

func (attr *String) UnmarshalJSON(bval []byte) error {
  sval := string(bval)

  if sval == "null" {
    attr.Status = Null
    return nil
  }

  err := json.Unmarshal(bval, &attr.Value)
  if err != nil {
    return err
  }

  attr.Status = Present
  return nil
}
