// This file is automatically generated.
package {{.PkgName}}

import (
  "encoding/json"
  "errors"
  "fmt"
  "net"
  "strconv"
  "time"

  "github.com/jackc/pgx"
)

type Status byte

const (
  Undefined Status = iota
  Null
  Present
)

func (s Status) String() string {
  switch s {
  case Undefined:
    return "Undefined"
  case Null:
    return "Null"
  case Present:
    return "Present"
  }

  return "Invalid status"
}

{{range .BoxTypes}}
type {{.Name}} struct {
  Value  {{.ValueType}}
  Status Status
}

func (attr *{{.Name}}) String() string {
  if attr.Status == Present {
    return fmt.Sprintf("%v", attr.Value)
  }
  return attr.Status.String()
}

func (attr *{{.Name}}) addUpdate(columnName string, sets *[]string, args *pgx.QueryArgs) {
  switch attr.Status {
    case Present, Null:
      *sets = append(*sets, columnName+"="+args.Append(attr))
  }
}

func (attr *{{.Name}}) addInsert(columnName string, sets, values *[]string, args *pgx.QueryArgs) {
  switch attr.Status {
    case Present, Null:
      *sets = append(*sets, columnName)
      *values = append(*values, args.Append(attr))
  }
}

func (attr *{{.Name}}) FormatCode() int16 {
  return {{.FormatCode}}
}
{{end}}

func (attr *Bool) Scan(vr *pgx.ValueReader) error {
  if vr.Type().DataType != pgx.BoolOid {
    return pgx.SerializationError(fmt.Sprintf("Bool.Scan cannot decode OID %d", vr.Type().DataType))
  }

  if vr.Len() == -1 {
    attr.Value = false
    attr.Status = Null
    return nil
  }

  attr.Value = pgx.DecodeBool(vr)
  attr.Status = Present
  return vr.Err()
}

func (attr *Bool) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  if oid != pgx.BoolOid {
    return pgx.SerializationError(fmt.Sprintf("Bool.Encode cannot encode into OID %d", oid))
  }

  switch attr.Status {
  case Present:
    return pgx.EncodeBool(w, oid, attr.Value)
  case Null:
    w.WriteInt32(-1)
    return nil
  case Undefined:
    return errors.New("cannot encode undefined attr")
  default:
    panic("unreachable")
  }
}

func (attr *Int16) Scan(vr *pgx.ValueReader) error {
  if vr.Type().DataType != pgx.Int2Oid {
    return pgx.SerializationError(fmt.Sprintf("Int16.Scan cannot decode OID %d", vr.Type().DataType))
  }

  if vr.Len() == -1 {
    attr.Value = 0
    attr.Status = Null
    return nil
  }

  attr.Value = pgx.DecodeInt2(vr)
  attr.Status = Present
  return vr.Err()
}

func (attr *Int16) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  if oid != pgx.Int2Oid {
    return pgx.SerializationError(fmt.Sprintf("Int16.Encode cannot encode into OID %d", oid))
  }

  switch attr.Status {
  case Present:
    return pgx.EncodeInt16(w, oid, attr.Value)
  case Null:
    w.WriteInt32(-1)
    return nil
  case Undefined:
    return errors.New("cannot encode undefined attr")
  default:
    panic("unreachable")
  }
}

func (attr *Int32) Scan(vr *pgx.ValueReader) error {
  if vr.Type().DataType != pgx.Int4Oid {
    return pgx.SerializationError(fmt.Sprintf("Int32.Scan cannot decode OID %d", vr.Type().DataType))
  }

  if vr.Len() == -1 {
    attr.Value = 0
    attr.Status = Null
    return nil
  }

  attr.Value = pgx.DecodeInt4(vr)
  attr.Status = Present
  return vr.Err()
}

func (attr *Int32) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  if oid != pgx.Int4Oid {
    return pgx.SerializationError(fmt.Sprintf("Int32.Encode cannot encode into OID %d", oid))
  }

  switch attr.Status {
  case Present:
    return pgx.EncodeInt32(w, oid, attr.Value)
  case Null:
    w.WriteInt32(-1)
    return nil
  case Undefined:
    return errors.New("cannot encode undefined attr")
  default:
    panic("unreachable")
  }
}

func (attr *Int64) Scan(vr *pgx.ValueReader) error {
  if vr.Type().DataType != pgx.Int8Oid {
    return pgx.SerializationError(fmt.Sprintf("Int64.Scan cannot decode OID %d", vr.Type().DataType))
  }

  if vr.Len() == -1 {
    attr.Value = 0
    attr.Status = Null
    return nil
  }

  attr.Value = pgx.DecodeInt8(vr)
  attr.Status = Present
  return vr.Err()
}

func (attr *Int64) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  if oid != pgx.Int8Oid {
    return pgx.SerializationError(fmt.Sprintf("Int64.Encode cannot encode into OID %d", oid))
  }

  switch attr.Status {
  case Present:
    return pgx.EncodeInt64(w, oid, attr.Value)
  case Null:
    w.WriteInt32(-1)
    return nil
  case Undefined:
    return errors.New("cannot encode undefined attr")
  default:
    panic("unreachable")
  }
}

func (attr *String) Scan(vr *pgx.ValueReader) error {
  if vr.Len() == -1 {
    attr.Value = ""
    attr.Status = Null
    return nil
  }

  attr.Value = pgx.DecodeText(vr)
  attr.Status = Present
  return vr.Err()
}

func (attr *String) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  switch attr.Status {
  case Present:
    return pgx.EncodeString(w, oid, attr.Value)
  case Null:
    w.WriteInt32(-1)
    return nil
  case Undefined:
    return errors.New("cannot encode undefined attr")
  default:
    panic("unreachable")
  }
}

func (attr *Time) Scan(vr *pgx.ValueReader) error {
  oid := vr.Type().DataType
  if oid != pgx.TimestampTzOid && oid != pgx.TimestampOid && oid != pgx.DateOid {
    return pgx.SerializationError(fmt.Sprintf("Time.Scan cannot decode OID %d", vr.Type().DataType))
  }

  if vr.Len() == -1 {
    attr.Value = time.Time{}
    attr.Status = Null
    return nil
  }

  attr.Status = Present
  switch oid {
  case pgx.TimestampTzOid:
    attr.Value = pgx.DecodeTimestampTz(vr)
  case pgx.TimestampOid:
    attr.Value = pgx.DecodeTimestamp(vr)
  case pgx.DateOid:
    attr.Value = pgx.DecodeDate(vr)
  }

  return vr.Err()
}

func (attr *Time) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  if oid != pgx.TimestampTzOid && oid != pgx.TimestampOid && oid != pgx.DateOid {
    return pgx.SerializationError(fmt.Sprintf("Time.Encode cannot encode into OID %d", oid))
  }

  switch attr.Status {
  case Present:
    return pgx.EncodeTime(w, oid, attr.Value)
  case Null:
    w.WriteInt32(-1)
    return nil
  case Undefined:
    return errors.New("cannot encode undefined attr")
  default:
    panic("unreachable")
  }
}

func (attr *IPNet) Scan(vr *pgx.ValueReader) error {
  oid := vr.Type().DataType
  if oid != pgx.InetOid && oid != pgx.CidrOid {
    return pgx.SerializationError(fmt.Sprintf("IPNet.Scan cannot decode OID %d", vr.Type().DataType))
  }

  if vr.Len() == -1 {
    attr.Value = net.IPNet{}
    attr.Status = Null
    return nil
  }

  attr.Status = Present
  attr.Value = pgx.DecodeInet(vr)

  return vr.Err()
}

func (attr *IPNet) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  if oid != pgx.InetOid && oid != pgx.CidrOid {
    return pgx.SerializationError(fmt.Sprintf("IPNet.Encode cannot encode into OID %d", oid))
  }

  switch attr.Status {
  case Present:
    return pgx.EncodeIPNet(w, oid, attr.Value)
  case Null:
    w.WriteInt32(-1)
    return nil
  case Undefined:
    return errors.New("cannot encode undefined attr")
  default:
    panic("unreachable")
  }
}

type Bytes struct {
  Value  []byte
  Status Status
}

func (attr *Bytes) addUpdate(columnName string, sets *[]string, args *pgx.QueryArgs) {
  switch attr.Status {
    case Present:
      *sets = append(*sets, columnName+"="+args.Append(attr.Value))
    case Null:
      *sets = append(*sets, columnName+"="+args.Append(nil))
  }
}

func (attr *Bytes) addInsert(columnName string, sets, values *[]string, args *pgx.QueryArgs) {
  switch attr.Status {
    case Present:
      *sets = append(*sets, columnName)
      *values = append(*values, args.Append(attr.Value))
    case Null:
      *sets = append(*sets, columnName)
      *values = append(*values, args.Append(nil))
  }
}

func (attr *Bytes) Scan(vr *pgx.ValueReader) error {
  if vr.Len() == -1 {
    attr.Value = nil
    attr.Status = Null
    return nil
  }

  attr.Value = vr.ReadBytes(vr.Len())
  attr.Status = Present
  return vr.Err()
}


func (attr Bytes) FormatCode() int16 {
  return pgx.BinaryFormatCode
}

func (attr Bytes) Encode(w *pgx.WriteBuf, oid pgx.Oid) error {
  if oid != pgx.ByteaOid {
    return pgx.SerializationError(fmt.Sprintf("Bytes.Encode cannot encode into OID %d", oid))
  }

  if attr.Status != Present {
    w.WriteInt32(-1)
    return nil
  }

  w.WriteBytes(attr.Value)
  return nil
}


func (attr Bool) MarshalJSON() ([]byte, error) {
  if attr.Status != Present {
    return []byte("null"), nil
  }
  if attr.Value {
    return []byte("true"), nil
  }
  return []byte("false"), nil
}

func (attr *Bool) UnmarshalJSON(bval []byte) error {
  sval := string(bval)

  switch sval {
  case "true":
    attr.Value = true
    attr.Status = Present
  case "false":
    attr.Value = false
    attr.Status = Present
  case "null":
    attr.Status = Null
  default:
    return errors.New("unknown Bool value")
  }

  return nil
}


{{range .IntBoxTypes}}
func (attr {{.Name}}) MarshalJSON() ([]byte, error) {
  if attr.Status != Present {
    return []byte("null"), nil
  }
  return []byte(strconv.FormatInt(int64(attr.Value), 10)), nil
}

func (attr *{{.Name}}) UnmarshalJSON(bval []byte) error {
  sval := string(bval)

  if sval == "null" {
    attr.Status = Null
    return nil
  }

  nval, err := strconv.ParseInt(sval, 10, {{.BitSize}})
  if err != nil {
    return err
  }

  attr.Value = int{{.BitSize}}(nval)
  attr.Status = Present

  return nil
}
{{end}}

func (attr String) MarshalJSON() ([]byte, error) {
  if attr.Status != Present {
    return []byte("null"), nil
  }

  return json.Marshal(attr.Value)
}

func (attr *String) UnmarshalJSON(bval []byte) error {
  sval := string(bval)

  if sval == "null" {
    attr.Status = Null
    return nil
  }

  err := json.Unmarshal(bval, &attr.Value)
  if err != nil {
    return err
  }

  attr.Status = Present
  return nil
}
