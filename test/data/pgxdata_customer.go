package data
// This file is automatically generated by pgxdata.

import (
  "strings"

  "github.com/jackc/pgx"
)

type Customer struct {
  ID Int32
  FirstName String
  LastName String
  BirthDate Time
  CreationTime Time
}

const countCustomerSQL = `select count(*) from "customer"`

func CountCustomer(db Queryer) (int64, error) {
  var n int64
  err := prepareQueryRow(db, "pgxdataCountCustomer", countCustomerSQL).Scan(&n)
  return n, err
}

const SelectAllCustomerSQL = `select
  "id",
  "first_name",
  "last_name",
  "birth_date",
  "creation_time"
from "customer"`

func SelectAllCustomer(db Queryer) ([]Customer, error) {
  var rows []Customer

  dbRows, err := prepareQuery(db, "pgxdataSelectAllCustomer", SelectAllCustomerSQL)
  if err != nil {
    return nil, err
  }

  for dbRows.Next() {
    var row Customer
    dbRows.Scan(
&row.ID,
    &row.FirstName,
    &row.LastName,
    &row.BirthDate,
    &row.CreationTime,
    )
    rows = append(rows, row)
  }

  if dbRows.Err() != nil {
    return nil, dbRows.Err()
  }

  return rows, nil
}

const selectCustomerByPKSQL = `select
  "id",
  "first_name",
  "last_name",
  "birth_date",
  "creation_time"
from "customer"
where "id"=$1`

func SelectCustomerByPK(
  db Queryer,
  id int32,
) (*Customer, error) {
  var row Customer
  err := prepareQueryRow(db, "pgxdataSelectCustomerByPK", selectCustomerByPKSQL, id).Scan(
&row.ID,
    &row.FirstName,
    &row.LastName,
    &row.BirthDate,
    &row.CreationTime,
    )
  if err == pgx.ErrNoRows {
    return nil, ErrNotFound
  } else if err != nil {
    return nil, err
  }

  return &row, nil
}

func InsertCustomer(db Queryer, row *Customer) error {
  args := pgx.QueryArgs(make([]interface{}, 0, 5))

  var columns, values []string

  row.ID.addInsert(`id`, &columns, &values, &args)
  row.FirstName.addInsert(`first_name`, &columns, &values, &args)
  row.LastName.addInsert(`last_name`, &columns, &values, &args)
  row.BirthDate.addInsert(`birth_date`, &columns, &values, &args)
  row.CreationTime.addInsert(`creation_time`, &columns, &values, &args)


  sql := `insert into "customer"(` + strings.Join(columns, ", ") + `)
values(` + strings.Join(values, ",") + `)
returning "id"
  `

  psName := preparedName("pgxdataInsertCustomer", sql)

  return prepareQueryRow(db, psName, sql, args...).Scan(&row.ID)
}

func UpdateCustomer(db Queryer,
  id int32,
  row *Customer,
) error {
  sets := make([]string, 0, 5)
  args := pgx.QueryArgs(make([]interface{}, 0, 5))

  row.ID.addUpdate(`id`, &sets, &args)
  row.FirstName.addUpdate(`first_name`, &sets, &args)
  row.LastName.addUpdate(`last_name`, &sets, &args)
  row.BirthDate.addUpdate(`birth_date`, &sets, &args)
  row.CreationTime.addUpdate(`creation_time`, &sets, &args)


  if len(sets) == 0 {
    return nil
  }

  sql := `update "customer" set ` + strings.Join(sets, ", ") + ` where `  + `"id"=` + args.Append(id)

  psName := preparedName("pgxdataUpdateCustomer", sql)

  commandTag, err := prepareExec(db, psName, sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return ErrNotFound
  }
  return nil
}

func DeleteCustomer(db Queryer,
  id int32,
) error {
  args := pgx.QueryArgs(make([]interface{}, 0, 1))

  sql := `delete from "customer" where `  + `"id"=` + args.Append(id)

  commandTag, err := prepareExec(db, "pgxdataDeleteCustomer", sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return ErrNotFound
  }
  return nil
}

