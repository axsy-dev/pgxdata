package data
// This file is automatically generated by pgxdata.

import (
  "strings"

  "github.com/jackc/pgx"
)

type Widget struct {
  ID Int64
  Name String
  Weight Int16
}

const countWidgetSQL = `select count(*) from "widget"`

func CountWidget(db Queryer) (int64, error) {
  var n int64
  err := prepareQueryRow(db, "pgxdataCountWidget", countWidgetSQL).Scan(&n)
  return n, err
}

const SelectAllWidgetSQL = `select
  "id",
  "name",
  "weight"
from "widget"`

func SelectAllWidget(db Queryer) ([]Widget, error) {
  var rows []Widget

  dbRows, err := prepareQuery(db, "pgxdataSelectAllWidget", SelectAllWidgetSQL)
  if err != nil {
    return nil, err
  }

  for dbRows.Next() {
    var row Widget
    dbRows.Scan(
&row.ID,
    &row.Name,
    &row.Weight,
    )
    rows = append(rows, row)
  }

  if dbRows.Err() != nil {
    return nil, dbRows.Err()
  }

  return rows, nil
}

const selectWidgetByPKSQL = `select
  "id",
  "name",
  "weight"
from "widget"
where "id"=$1`

func SelectWidgetByPK(
  db Queryer,
  id int64,
) (*Widget, error) {
  var row Widget
  err := prepareQueryRow(db, "pgxdataSelectWidgetByPK", selectWidgetByPKSQL, id).Scan(
&row.ID,
    &row.Name,
    &row.Weight,
    )
  if err == pgx.ErrNoRows {
    return nil, ErrNotFound
  } else if err != nil {
    return nil, err
  }

  return &row, nil
}

func InsertWidget(db Queryer, row *Widget) error {
  args := pgx.QueryArgs(make([]interface{}, 0, 3))

  var columns, values []string

  row.ID.addInsert(`id`, &columns, &values, &args)
  row.Name.addInsert(`name`, &columns, &values, &args)
  row.Weight.addInsert(`weight`, &columns, &values, &args)


  sql := `insert into "widget"(` + strings.Join(columns, ", ") + `)
values(` + strings.Join(values, ",") + `)
returning "id"
  `

  psName := preparedName("pgxdataInsertWidget", sql)

  return prepareQueryRow(db, psName, sql, args...).Scan(&row.ID)
}

func UpdateWidget(db Queryer,
  id int64,
  row *Widget,
) error {
  sets := make([]string, 0, 3)
  args := pgx.QueryArgs(make([]interface{}, 0, 3))

  row.ID.addUpdate(`id`, &sets, &args)
  row.Name.addUpdate(`name`, &sets, &args)
  row.Weight.addUpdate(`weight`, &sets, &args)


  if len(sets) == 0 {
    return nil
  }

  sql := `update "widget" set ` + strings.Join(sets, ", ") + ` where `  + `"id"=` + args.Append(id)

  psName := preparedName("pgxdataUpdateWidget", sql)

  commandTag, err := prepareExec(db, psName, sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return ErrNotFound
  }
  return nil
}

func DeleteWidget(db Queryer,
  id int64,
) error {
  args := pgx.QueryArgs(make([]interface{}, 0, 1))

  sql := `delete from "widget" where `  + `"id"=` + args.Append(id)

  commandTag, err := prepareExec(db, "pgxdataDeleteWidget", sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return ErrNotFound
  }
  return nil
}

