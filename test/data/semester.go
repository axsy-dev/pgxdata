// This file is automatically generated.
package data

import (
  "strings"

  "github.com/jackc/pgx"
)

type Semester struct {
  Year Int16
  Season String
  Description String
}

func CountSemester(db Queryer) (int64, error) {
  var n int64
  sql := `select count(*) from "semester"`
  err := db.QueryRow(sql).Scan(&n)
  return n, err
}

func SelectAllSemester(db Queryer) ([]Semester, error) {
  sql := `select
  "year",
  "season",
  "description"
from "semester"`

  var rows []Semester

  dbRows, err := db.Query(sql)
  if err != nil {
    return nil, err
  }

  for dbRows.Next() {
    var row Semester
    dbRows.Scan(
&row.Year,
    &row.Season,
    &row.Description,
    )
    rows = append(rows, row)
  }

  if dbRows.Err() != nil {
    return nil, dbRows.Err()
  }

  return rows, nil
}

func SelectSemesterByPK(
  db Queryer,
  year int16,
  season string,
) (*Semester, error) {
  sql := `select
  "year",
  "season",
  "description"
from "semester"
where "year"=$1 and "season"=$2`

  var row Semester
  err := db.QueryRow(sql , year, season).Scan(
&row.Year,
    &row.Season,
    &row.Description,
    )
  if err == pgx.ErrNoRows {
    return nil, ErrNotFound
  } else if err != nil {
    return nil, err
  }

  return &row, nil
}

func InsertSemester(db Queryer, row *Semester) error {
  args := pgx.QueryArgs(make([]interface{}, 0, 3))

  var columns, values []string

  row.Year.addInsert(`year`, &columns, &values, &args)
  row.Season.addInsert(`season`, &columns, &values, &args)
  row.Description.addInsert(`description`, &columns, &values, &args)


  sql := `insert into "semester"(` + strings.Join(columns, ", ") + `)
values(` + strings.Join(values, ",") + `)
returning "year", "season"
  `

  return db.QueryRow(sql, args...).Scan(&row.Year, &row.Season)
}

func UpdateSemester(db Queryer,
  year int16,
  season string,
  row *Semester,
) error {
  sets := make([]string, 0, 3)
  args := pgx.QueryArgs(make([]interface{}, 0, 3))

  row.Year.addUpdate(`year`, &sets, &args)
  row.Season.addUpdate(`season`, &sets, &args)
  row.Description.addUpdate(`description`, &sets, &args)


  if len(sets) == 0 {
    return nil
  }

  sql := `update "semester" set ` + strings.Join(sets, ", ") + ` where `  + `"year"=` + args.Append(year) + ` and "season"=` + args.Append(season)

  commandTag, err := db.Exec(sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return pgx.ErrNoRows
  }
  return nil
}

func DeleteSemester(db Queryer,
  year int16,
  season string,
) error {
  args := pgx.QueryArgs(make([]interface{}, 0, 2))

  sql := `delete from "semester" where `  + `"year"=` + args.Append(year) + ` and "season"=` + args.Append(season)

  commandTag, err := db.Exec(sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return pgx.ErrNoRows
  }
  return nil
}

